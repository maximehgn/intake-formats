# These first fields are actually ECS fields
# They are redefined here because they have an observable mapping
# And we don't want to erase it when updating ECS fields
client.ip:
  description: IP address of the client (IPv4 or IPv6).
  name: ip
  short: IP address of the client.
  type: ip
  observable:
    type: ipv4-addr
    property: value
destination.domain:
  description: Destination domain.
  name: domain
  short: Destination domain.
  type: keyword
  observable:
    type: domain-name
    property: value
destination.ip:
  description: IP address of the destination (IPv4 or IPv6).
  name: ip
  short: IP address of the destination.
  type: ip
  observable:
    type: ipv4-addr
    property: value
destination.nat.ip:
  description:
    "Translated ip of destination based NAT sessions (e.g. internet to
    private DMZ)

    Typically used with load balancers, firewalls, or routers."
  name: nat.ip
  short: Destination NAT ip
  type: ip
  observable:
    type: ipv4-addr
    property: value
dns.question.name:
  description: 'The name being queried.

    If the name field contains non-printable characters (below 32 or above 126), those
    characters should be represented as escaped base 10 integers (\DDD). Back slashes
    and quotes should be escaped. Tabs, carriage returns, and line feeds should be
    converted to \t, \r, and \n respectively.'
  example: www.example.com
  name: question.name
  short: The name being queried.
  type: keyword
  observable:
    type: domain-name
    property: value
file.name:
  description: Name of the file including the extension, without the directory.
  example: example.png
  name: name
  short: Name of the file including the extension, without the directory.
  type: keyword
  observable:
    type: file
    property: name
host.hostname:
  description: "Hostname of the host.

    It normally contains what the `hostname` command returns on the host machine."
  name: hostname
  short: Hostname of the host.
  type: keyword
  observable:
    type: host
    property: name
host.name:
  description: "Name of the host.

    It can contain what `hostname` returns on Unix systems, the fully qualified domain
    name, or a name specified by the user. The sender decides which value to use."
  name: name
  short: Name of the host.
  type: keyword
  observable:
    type: host
    property: name
network.forwarded_ip:
  description: Host IP address when the source IP address is the proxy.
  example: 192.1.1.2
  name: forwarded_ip
  short: Host IP address when the source IP address is the proxy.
  type: ip
  observable:
    type: ipv4-addr
    property: value
process.title:
  description: "Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened."
  name: title
  short: Process title.
  type: keyword
  observable:
    type: process
    property: command_line
process.name:
  description: "Process name.

    Sometimes called program name or similar."
  example: ssh
  name: name
  short: Process name.
  type: keyword
  observable:
    type: file
    property: name
    name: process_file
process.command_line:
  description:
    "Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information."
  example: /usr/bin/ssh -l user 10.0.0.16
  name: command_line
  short: Full command line that started the process.
  type: keyword
  observable:
    type: process
    property: command_line
process.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  name: executable
  short: Absolute path to the process executable.
  type: keyword
  observable:
    type: file
    property: name
    name: process_file
process.hash.md5:
  description: MD5 hash.
  name: md5
  short: MD5 hash.
  type: keyword
  observable:
    type: file
    property: hashes.MD5
    name: process_file
process.hash.sha1:
  description: SHA1 hash.
  name: sha1
  short: SHA1 hash.
  type: keyword
  observable:
    type: file
    property: hashes.SHA1
    name: process_file
process.hash.sha256:
  description: SHA256 hash.
  name: sha256
  short: SHA256 hash.
  type: keyword
  observable:
    type: file
    property: hashes.SHA256
    name: process_file
process.parent.title:
  description: "Process title.

    The proctitle, some times the same as process name. Can also be different: for
    example a browser setting its title to the web page currently opened."
  name: title
  short: Process title.
  type: keyword
  observable:
    type: process
    property: command_line
process.parent.command_line:
  description:
    "Full command line that started the process, including the absolute
    path to the executable, and all arguments.

    Some arguments may be filtered to protect sensitive information."
  example: /usr/bin/ssh -l user 10.0.0.16
  name: command_line
  short: Full command line that started the process.
  type: keyword
  observable:
    type: process
    property: command_line
process.parent.executable:
  description: Absolute path to the process executable.
  example: /usr/bin/ssh
  name: executable
  short: Absolute path to the process executable.
  type: keyword
  observable:
    type: file
    property: name
    name: parent_process_file
process.parent.name:
  description: "Process name.

    Sometimes called program name or similar."
  example: ssh
  name: name
  short: Process name.
  type: keyword
  observable:
    type: file
    property: name
    name: parent_process_file
source.ip:
  description: IP address of the source (IPv4 or IPv6).
  name: ip
  short: IP address of the source.
  type: ip
  observable:
    type: ipv4-addr
    property: value
source.nat.ip:
  description:
    "Translated ip of source based NAT sessions (e.g. internal client to
    internet)

    Typically connections traversing load balancers, firewalls, or routers."
  name: nat.ip
  short: Source NAT ip
  type: ip
  observable:
    type: ipv4-addr
    property: value
url.domain:
  description: 'Domain of the url, such as "www.elastic.co".

    In some cases a URL may refer to an IP and/or port directly, without a domain
    name. In this case, the IP address would go to the `domain` field.

    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732),
    the `[` and `]` characters should also be captured in the `domain` field.'
  example: www.elastic.co
  name: domain
  short: Domain of the url.
  type: keyword
  observable:
    type: domain-name
    property: value
url.full:
  description:
    If full URLs are important to your use case, they should be stored
    in `url.full`, whether this field is reconstructed or present in the event source.
  example: https://www.elastic.co:443/search?q=elasticsearch#top
  name: full
  short: Full unparsed URL.
  type: keyword
  observable:
    type: url
    property: value
url.original:
  description: "Unmodified original url as seen in the event source.

    Note that in network monitoring, the observed URL may be a full URL, whereas in
    access logs, the URL is often just represented as a path.

    This field is meant to represent the URL as it was observed, complete or not."
  example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
  name: original
  short: Unmodified original url as seen in the event source.
  type: keyword
  observable:
    type: url
    property: value
user.domain:
  description: "Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name."
  name: domain
  short: Name of the directory the user is a member of.
  type: keyword
  observable:
    type: user-account
    property: domain
    name: user
user.email:
  description: User email address.
  name: email
  short: User email address.
  type: keyword
  observable:
    type: email-addr
    property: value
user.id:
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  name: id
  short: Unique identifier of the user.
  type: keyword
  observable:
    type: user-account
    property: user_id
    name: user
user.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  name: full_name
  short: User's full name, if available.
  type: keyword
  observable:
    type: user-account
    property: display_name
    name: user
user.name:
  description: Short name or login of the user.
  example: a.einstein
  name: name
  short: Short name or login of the user.
  type: keyword
  observable:
    type: user-account
    property: account_login
    name: user
user.effective.domain:
  description: "Name of the directory the user is a member of.

    For example, an LDAP or Active Directory domain name."
  name: domain
  short: Name of the directory the user is a member of.
  type: keyword
  observable:
    type: user-account
    property: domain
    name: effective_user
user.effective.email:
  description: User email address.
  name: email
  short: User email address.
  type: keyword
  observable:
    type: email-addr
    property: value
user.effective.id:
  description: Unique identifier of the user.
  example: S-1-5-21-202424912787-2692429404-2351956786-1000
  name: id
  short: Unique identifier of the user.
  type: keyword
  observable:
    type: user-account
    property: user_id
    name: effective_user
user.effective.full_name:
  description: User's full name, if available.
  example: Albert Einstein
  name: full_name
  short: User's full name, if available.
  type: keyword
  observable:
    type: user-account
    property: display_name
    name: effective_user
user.effective.name:
  description: Short name or login of the user.
  example: a.einstein
  name: name
  short: Short name or login of the user.
  type: keyword
  observable:
    type: user-account
    property: account_login
    name: effective_user

# These fields are also ECS fields that need to be defined
# Because `geo_point` is not a type recognized by ingest
client.geo.location.lon:
  description: Longitude
  name: client.geo.location.lon
  type: float
client.geo.location.lat:
  description: Latitude
  name: client.geo.location.lat
  type: float
destination.geo.location.lon:
  description: Longitude
  name: destination.geo.location.lon
  type: float
destination.geo.location.lat:
  description: Latitude
  name: destination.geo.location.lat
  type: float
host.geo.location.lon:
  description: Longitude
  name: host.geo.location.lon
  type: float
host.geo.location.lat:
  description: Latitude
  name: host.geo.location.lat
  type: float
observer.geo.location.lon:
  description: Longitude
  name: observer.geo.location.lon
  type: float
observer.geo.location.lat:
  description: Latitude
  name: observer.geo.location.lat
  type: float
server.geo.location.lon:
  description: Longitude
  name: server.geo.location.lon
  type: float
server.geo.location.lat:
  description: Latitude
  name: server.geo.location.lat
  type: float
source.geo.location.lon:
  description: Longitude
  name: source.geo.location.lon
  type: float
source.geo.location.lat:
  description: Latitude
  name: source.geo.location.lat
  type: float
threat.enrichments.indicator.geo.location.lon:
  description: Longitude
  name: threat.enrichments.indicator.geo.location.lon
  type: float
threat.enrichments.indicator.geo.location.lat:
  description: Latitude
  name: threat.enrichments.indicator.geo.location.lat
  type: float
threat.indicator.geo.location.lon:
  description: Longitude
  name: threat.indicator.geo.location.lon
  type: float
threat.indicator.geo.location.lat:
  description: Latitude
  name: threat.indicator.geo.location.lat
  type: float

# Below are the actual custom fields defined by Sekoia.io
action.id:
  description: Identifier of the action
  example: test
  name: action.id
  short: Action Id
  type: number
action.name:
  description: The name of the action
  example: test
  name: action.name
  short: Action Name
  type: keyword
action.type:
  description: The type of the action
  example: test
  name: action.type
  short: Action Type
  type: keyword
action.outcome:
  description: The outcome of the action
  example: test
  name: action.outcome
  short: Action outcome
  type: keyword
action.outcome_reason:
  description: The reason of the outcome of the action
  example: test
  name: action.outcome_reason
  short: Outcome Reason
  type: keyword
action.record_id:
  description: The Record ID of the action
  name: action.record_id
  short: Record ID of the action
  type: number
alert_short_ids:
  description: A list of short identifiers of alerts related to the event
  name: alert_short_ids
  short: Short identifiers of related alerts
  type: array
customer.community_name:
  description: Name of the community in Sekoia.io
  example: my community
  name: customer.community_name
  short: Name of the community
  type: keyword
customer.community_uuid:
  description: Unique identifier of the community in Sekoia.io
  example: 7ca3b0ef-ba7c-454c-9fae-1a6242abacce
  name: customer.community_uuid
  short: UUID of the community
  type: keyword
customer.id:
  description: Identifier of the customer
  example: MyCommunity
  name: customer.id
  short: Identifier of the customer
  type: keyword
customer.intake_key:
  description: Intake key used to collect event
  example: riguhhuHVBhUHUHJhjhku273kpmzPq73
  name: customer.intake_key
  short: Intake key
  type: keyword
customer.intake_name:
  description: Name of the intake key to collect event
  example: Fortinet06
  name: customer.intake_name
  short: Intake name
  type: keyword
customer.intake_uuid:
  description: Unique identifier of the intake key to collect event
  example: 7ca3b0ef-ba7c-454c-9fae-1a6242abacce
  name: customer.intake_uuid
  short: UUID of the Intake
  type: keyword
entity.id:
  description: Identifier of the entity where the event occurred
  example: REGION-WEST-FR01
  name: entity.id
  short: Identifier of the entity
  type: keyword
entity.name:
  description: Name of the entity where the event occurred
  example: France 01
  name: entity.name
  short: Name of the entity
  type: keyword
entity.uuid:
  description: Unique identifier of the entity where the event occurred
  example: 7ca3b0ef-ba7c-454c-9fae-1a6242abacce
  name: entity.uuid
  short: UUID of the entity
  type: keyword
event.dialect:
  description: Dialect of the event
  example: Windows
  name: event.dialect
  short: Dialect of the event
  type: keyword
event.dialect_uuid:
  description: The identifier of the dialect of the event
  name: event.dialect_uuid
  short: Dialect identifier
  type: string
event.stix:
  description: The STIX representation of the event
  name: event.stix
  short: STIX bundle
  type: dict
event.message:
  description: Message of the event.
  name: event.message
  short: Message of the event.
  type: string
log.description:
  description: Description of a log
  name: log.description
  short: Description of a log
  type: string
log.hostname:
  description: Name of the host that emitted the event
  name: log.hostname
  short: Name of the host that emitted the event
  type: string
  observable:
    type: host
    property: name
log.original:
  description: Original event recieved via the Syslog protocol
  name: log.original
  short: Original event recieved via the Syslog protocol
  type: non_searchable_field_type
log.priority:
  description: Syslog numeric priority of the event.
  name: log.priority
  short: Syslog numeric priority of the event.
  type: number
os.family:
  description: Operating System family
  name: os.family
  short: Operating System family
  type: string
os.platform:
  description: Operating System platform
  name: os.platform
  short: Operating System platform
  type: string
sekoiaio.case.short_id:
  name: sekoiaio.case.short_id
  description: List of case short IDs the event was added to
  short: Case short IDs
  type: keyword
sekoiaio.intake.uuid:
  name: sekoiaio.intake.uuid
  description: UUID of the intake
  short: Intake UUID
  type: keyword
sekoiaio.intake.name:
  name: sekoiaio.intake.name
  description: Name of the intake
  short: Intake Name
  type: keyword
sekoiaio.intake.key:
  name: sekoiaio.intake.key
  description: Intake key used to collect event
  short: Intake Key
  type: keyword
sekoiaio.intake.dialect:
  name: sekoiaio.intake.dialect
  description: Name of the intake format
  short: Intake Format
  type: keyword
sekoiaio.intake.dialect_uuid:
  name: sekoiaio.intake.dialect_uuid
  description: UUID of the intake format
  short: Intake Format UUID
  type: keyword
sekoiaio.customer.community_name:
  description: Name of the community in Sekoia.io
  example: my community
  name: sekoiaio.customer.community_name
  short: Name of the community
  type: keyword
sekoiaio.customer.community_uuid:
  description: Unique identifier of the community in Sekoia.io
  example: 7ca3b0ef-ba7c-454c-9fae-1a6242abacce
  name: sekoiaio.customer.community_uuid
  short: UUID of the community
  type: keyword
sekoiaio.customer.id:
  description: Identifier of the customer
  example: MyCommunity
  name: sekoiaio.customer.id
  short: Identifier of the customer
  type: keyword
sekoiaio.entity.id:
  description: Identifier of the entity where the event occurred
  example: REGION-WEST-FR01
  name: sekoiaio.entity.id
  short: Identifier of the entity
  type: keyword
sekoiaio.entity.name:
  description: Name of the entity where the event occurred
  example: France 01
  name: sekoiaio.entity.name
  short: Name of the entity
  type: keyword
sekoiaio.entity.uuid:
  description: Unique identifier of the entity where the event occurred
  example: 7ca3b0ef-ba7c-454c-9fae-1a6242abacce
  name: sekoiaio.entity.uuid
  short: UUID of the entity
  type: keyword
sekoiaio.indexation.status:
  name: sekoiaio.indexation.status
  description: Status of event indexation (only set when 'failure')
  short: Indexation status
  type: keyword
sekoiaio.indexation.errors:
  name: sekoiaio.indexation.errors
  description: Error messages that prevented indexation
  short: Indexation errors
  type: keyword
sekoiaio.intake.parsing_status:
  description: Parsing status of the event
  name: sekoiaio.intake.parsing_status
  short: Parsing status
  type: keyword
sekoiaio.intake.parsing_error:
  description: Error that prevented event parsing
  name: sekoiaio.intake.parsing_error
  short: Parsing error
  type: keyword
sekoiaio.intake.parsing_warnings:
  description: A list of warnings when the event is partially valid
  name: sekoiaio.intake.parsing_warnings
  short: Parsing warnings
  type: string
sekoiaio.matches:
  description: The list of matches for the event
  name: sekoiaio.matches
  short: List of Matches
  type: nested
sekoiaio.tags:
  description: The list of tags matching the event
  name: sekoiaio.tags
  short: List of tags
  type: array
sekoiaio.assets:
  description: The list of assets associated to the event
  name: sekoiaio.assets
  short: List of assets
  type: nested
sekoiaio.any_asset:
  description: The list of assets associated to the event
  name: sekoiaio.any_asset
  short: List of assets
  type: nested
